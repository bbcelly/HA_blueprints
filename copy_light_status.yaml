blueprint:
  name: Copy light status
  description: Copies status from one light to another when source light changes state
  domain: automation
  source_url: https://raw.githubusercontent.com/bbcelly/HA_blueprints/main/copy_light_status.yaml
  input:
    light_source:
      name: Light source
      selector:
        entity:
          domain: light
    light_target:
      name: Light target
      selector:
        target:
          entity:
            domain: light

mode: single

trigger:
  platform: state
  entity_id: !input light_source
condition: []

action:
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'off' }}"
        sequence:
          - service: light.turn_off
            target: !input light_target
      ## ON/OFF
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: template
            value_template: "{{ trigger.to_state.attributes.get('supported_color_modes') != None and trigger.to_state.attributes.supported_color_modes[0] == 'onoff' }}"
        sequence:
          - service: light.turn_on
            target: !input light_target
      ## Brightness
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: template
            value_template: "{{ trigger.to_state.attributes.get('color_mode') == 'brightness' }}"
        sequence:
          - service: light.turn_on
            target: !input light_target
            data_template:
              brightness: >-
                {{ trigger.to_state.attributes.get('brightness')
                }}
      ## Color temp
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: template
            value_template: "{{ trigger.to_state.attributes.get('color_mode') == 'color_temp' }}"
        sequence:
          - service: light.turn_on
            target: !input light_target
            data_template:
              color_temp: >-
                {{ trigger.to_state.attributes.get('color_temp')
                }}
              brightness: >-
                {{ trigger.to_state.attributes.get('brightness')
                }}
      ## RGB color
      - conditions:
          - condition: template
            value_template: "{{ trigger.to_state.state == 'on' }}"
          - condition: template
            value_template: "{{ trigger.to_state.attributes.get('color_mode') == 'hs' }}"
        sequence:
          - service: light.turn_on
            target: !input light_target
            data_template:
              rgb_color:
                - >-
                  {{ trigger.to_state.attributes.rgb_color[0] }}
                - >-
                  {{ trigger.to_state.attributes.rgb_color[1] }}
                - >-
                  {{ trigger.to_state.attributes.rgb_color[2] }}
              brightness: >-
                {{ trigger.to_state.attributes.get('brightness')
                }}
